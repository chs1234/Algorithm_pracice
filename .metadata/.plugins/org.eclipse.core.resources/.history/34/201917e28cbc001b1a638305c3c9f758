package openApi;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.IOException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
public class Test {

//	public static void main(String[] args) throws IOException {
//        StringBuilder urlBuilder = new StringBuilder("http://apis.data.go.kr/1130000/MllInfoService/getMllSttemntInfo"); /*URL*/
//        urlBuilder.append("?" + URLEncoder.encode("ServiceKey","UTF-8") + "=qmZ1eXuacini8rm5AzU1GAW5jlLwg0cm%2Br8VJ1akWFj%2FjK3wIuvQfvwVLEMwGN9A1wCnlJeiUINxkJ2PUNuTCg%3D%3D"); /*Service Key*/
//        urlBuilder.append("&" + URLEncoder.encode("fromPermYmd","UTF-8") + "=" + URLEncoder.encode("20210503", "UTF-8")); /*시도명*/
//        urlBuilder.append("&" + URLEncoder.encode("toPermYmd","UTF-8") + "=" + URLEncoder.encode("20210503", "UTF-8")); /*시군구명*/
//        URL url = new URL(urlBuilder.toString());
//        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
//        conn.setRequestMethod("GET");
//        conn.setRequestProperty("Content-type", "application/json");
//        System.out.println("Response code: " + conn.getResponseCode());
//        BufferedReader rd;
//        if(conn.getResponseCode() >= 200 && conn.getResponseCode() <= 300) {
//            rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
//        } else {
//            rd = new BufferedReader(new InputStreamReader(conn.getErrorStream()));
//        }
//        StringBuilder sb = new StringBuilder();
//        String line;
//        while ((line = rd.readLine()) != null) {
//            sb.append(line);
//        }
//        rd.close();
//        conn.disconnect();
//        System.out.println(sb.toString());
//    }
	
	 // tag값의 정보를 가져오는 메소드
		private static String getTagValue(String tag, Element eElement) {
		    NodeList nlList = eElement.getElementsByTagName(tag).item(0).getChildNodes();
		    Node nValue = (Node) nlList.item(0);
		    if(nValue == null) 
		        return null;
		    return nValue.getNodeValue();
		}

		public static void main(String[] args) {
			int page = 1;	// 페이지 초기값 
			try{
				while(true){
					// parsing할 url 지정(API 키 포함해서)
					String url = "http://apis.data.go.kr/1130000/MllInfoService/getMllSttemntInfo?ServiceKey=qmZ1eXuacini8rm5AzU1GAW5jlLwg0cm%2Br8VJ1akWFj%2FjK3wIuvQfvwVLEMwGN9A1wCnlJeiUINxkJ2PUNuTCg%3D%3D&fromPermYmd=20210523&toPermYmd=20210523&numOfRows=1000";
					
					DocumentBuilderFactory dbFactoty = DocumentBuilderFactory.newInstance();
					DocumentBuilder dBuilder = dbFactoty.newDocumentBuilder();
					Document doc = dBuilder.parse(url);
					
					// root tag 
					doc.getDocumentElement().normalize();
					System.out.println("Root element :" + doc.getDocumentElement().getNodeName());
					
					// 파싱할 tag
					NodeList nList = doc.getElementsByTagName("item");
					//System.out.println("파싱할 리스트 수 : "+ nList.getLength());
					
					for(int temp = 0; temp < nList.getLength(); temp++){
						Node nNode = nList.item(temp);
						if(nNode.getNodeType() == Node.ELEMENT_NODE){
							
							Element eElement = (Element) nNode;
							System.out.println("######################");
							//System.out.println(eElement.getTextContent());
							System.out.println("금융사  : " + getTagValue("bupNm", eElement));
							System.out.println("상품 코드  : " + getTagValue("dmnNm", eElement));
							System.out.println("상품명 : " + getTagValue("mngStateCode", eElement));
							System.out.println("연평균 수익률  : " + getTagValue("permYmd", eElement));
							System.out.println("공시 이율  : " + getTagValue("repsntNm", eElement));
						}	// for end
					}	// if end
					
					page += 1;
					System.out.println("page number : "+page);
					if(page > 12){	
						break;
					}
				}	// while end
				
			} catch (Exception e){	
				e.printStackTrace();
			}	// try~catch end
		}	// main end

}
